pragma solidity ^0.6.0;

import {SolRsaVerify} from "./SolRsaVerify.sol";

contract Soulve {
  /* some big hex strings */
  bytes MODULUS = hex"86E996013E77C41699000E0941D480C046B2F71A4F95B350AC1A4D426372923D8A4561D96FBFB0240595907201AD3225CF6EDED7DE02D91C386FFAC280B732EE4C9C0042007AF5E6D42D8960F00E716A8801A37FC23EA0E7ED4BE6CE248996EF61EF6A1F936B47A101EA5BC3C2467938BD4D3CDB3B2F5CB8FEA75665BF6D4195";
  bytes EXPONENT = hex"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
  /* yeet */
  function soulve(bytes memory _MESSAGE, bytes memory _SIGNATURE) public payable {
    /* o.O */
    require(keccak256(abi.encodePacked(_MESSAGE)) == keccak256(abi.encodePacked(keccak256(abi.encodePacked(msg.sender)))), '0xD15EA5E' );
    /* ez */
    uint soulveSig = SolRsaVerify.pkcs1Sha256VerifyRaw(_MESSAGE, _SIGNATURE, EXPONENT, MODULUS);
    /* soulved? */
    require(soulveSig == 0, '0xD15EA5E');
    /* swag */
    msg.sender.transfer(address(this).balance);
  }

  /* load the loot */
  receive() external payable {}

}
